import React, {Component} from 'react';

import Timer from "../LayoutComponents/Timer";

export default class CountTask_Demo extends Component{

    constructor(props) {
        super(props);

        this.state = {
            modal: "modal is-active",
            taskActive: false,
            taskStarted: false,
            practiceEnd: false,
            showFixCross: false,
            taskCount: 0,
            progressValue: 0,
            numTargets: 0,
            numTargetsTrial: [],
            numHexVertical: [],
            numHexHorizontal: [],
            // count task practice
            givenSolution: 0,
            validSolution: -99,
            showSolution: false
        };

        this.initializeTask = this.initializeTask.bind(this);
        this.renderInstruction = this.renderInstruction.bind(this);
        this.renderTaskTrial = this.renderTaskTrial.bind(this);
        this.renderFixationCross = this.renderFixationCross.bind(this);
        this.makeRandomShapes = this.makeRandomShapes.bind(this);
        this.endTask = this.endTask.bind(this);
        this.tick = this.tick.bind(this);

        // hard coded x-y coordinate of the shapes in the svg (the coordinates are generated by an algorithm
        this.shapes = {
            'Pr': {0: [
                    {
                        'targ': [[606, 287], [155, 422], [381, 289], [656, 249]],
                        'dist_1': [[73, 199], [702, 62], [72, 334], [428, 431], [204, 422]],
                        'dist_2': [[470, 244], [649, 425], [513, 250], [68, 247], [427, 206], [342, 247]]
                    },
                    {
                        'targ': [[655, 115], [245, 426], [469, 207], [557, 155], [656, 423]],
                        'dist_1': [[381, 243], [474, 156], [472, 114], [738, 111], [740, 64]],
                        'dist_2': [[514, 109], [562, 111], [693, 117], [242, 384], [242, 67]]
                    },
                    {
                        'targ': [[657, 152], [741, 65], [658, 297], [427, 197], [700, 288], [475, 246]],
                        'dist_1': [[246, 152], [561, 292], [287, 429], [246, 117]],
                        'dist_2': [[382, 378], [432, 338], [386, 290], [703, 388], [337, 337]]}]
            },
            // more difficult version with old algorithm
            // 'Hs': {0: [{'targ': [[788, 197], [470, 298], [198, 152], [650, 334], [741, 432], [703, 253], [655, 426], [243, 426], [514, 387], [472, 386]], 'dist_1': [[606, 115], [341, 381], [246, 242], [788, 293], [562, 250], [792, 383], [295, 386]], 'dist_2': [[293, 247], [293, 197], [341, 297], [107, 207], [475, 338], [290, 73], [658, 377], [429, 337]]}, {'targ': [[332, 245], [424, 338], [702, 332], [197, 430], [244, 433], [204, 64], [561, 433], [297, 242], [697, 204], [467, 380]], 'dist_1': [[202, 291], [205, 337], [612, 433], [523, 114], [604, 107], [612, 385], [110, 426]], 'dist_2': [[67, 425], [649, 291], [650, 200], [287, 153], [383, 161], [384, 388], [160, 110], [516, 339]]}, {'targ': [[742, 336], [343, 208], [477, 334], [696, 163], [786, 70]], 'dist_1': [[162, 198], [518, 289], [650, 290], [512, 335], [742, 68], [782, 289], [73, 289], [741, 427], [518, 152], [565, 66]], 'dist_2': [[163, 337], [698, 67], [248, 63], [249, 110], [422, 295], [388, 69], [341, 292], [561, 425], [602, 206], [208, 422]]}, {'targ': [[109, 161], [199, 333], [742, 203], [605, 62], [250, 248], [208, 293], [475, 426], [426, 208]], 'dist_1': [[423, 378], [514, 427], [109, 243], [791, 198], [604, 115], [379, 70], [697, 113], [786, 298]], 'dist_2': [[431, 248], [567, 152], [693, 334], [604, 385], [289, 385], [517, 248], [334, 294], [203, 203], [287, 204]]}, {'targ': [[71, 158], [428, 197], [515, 244], [298, 251], [296, 70], [560, 109], [785, 244], [424, 433], [693, 72]], 'dist_1': [[747, 381], [111, 338], [515, 65], [737, 290], [65, 199], [292, 153], [612, 159], [342, 338]], 'dist_2': [[747, 341], [476, 341], [698, 162], [609, 73], [288, 205], [114, 288], [160, 152], [65, 338]]}, {'targ': [[785, 245], [745, 160], [288, 197], [694, 67], [109, 155], [742, 250], [432, 154], [560, 154]], 'dist_1': [[245, 72], [604, 423], [340, 162], [339, 200], [384, 429], [432, 296], [197, 429], [152, 154]], 'dist_2': [[469, 242], [152, 383], [790, 298], [108, 294], [520, 111], [696, 334], [656, 200], [432, 342], [606, 341]]}, {'targ': [[162, 431], [739, 206], [62, 155], [473, 387], [289, 208], [386, 154], [198, 197], [69, 250], [432, 294]], 'dist_1': [[562, 333], [377, 335], [289, 67], [63, 287], [424, 200], [558, 156], [292, 116], [340, 384]], 'dist_2': [[523, 381], [107, 109], [424, 112], [605, 66], [341, 290], [243, 113], [652, 387], [73, 385]]}], 1: [{'targ': [[693, 202], [793, 287], [523, 248], [342, 110], [564, 69]], 'dist_1': [[113, 379], [694, 70], [242, 380], [163, 386], [386, 202], [783, 249], [566, 112], [564, 342], [68, 159], [470, 385], [609, 72], [648, 378]], 'dist_2': [[429, 243], [66, 294], [787, 65], [242, 336], [693, 152], [648, 428], [656, 292], [523, 202], [426, 378], [296, 116], [118, 65], [298, 382], [789, 428]]}, {'targ': [[612, 426], [342, 69], [422, 381], [152, 155], [512, 208], [563, 432], [68, 296], [562, 340], [650, 159], [478, 341]], 'dist_1': [[744, 426], [158, 287], [518, 244], [244, 73], [248, 155], [71, 199], [335, 336], [115, 111], [693, 108], [784, 116]], 'dist_2': [[333, 208], [161, 206], [382, 382], [287, 66], [656, 428], [110, 341], [700, 291], [251, 199], [744, 336], [651, 380]]}, {'targ': [[656, 377], [246, 340], [65, 287], [294, 112], [787, 73], [158, 69], [340, 153]], 'dist_1': [[522, 296], [385, 73], [784, 379], [786, 245], [649, 110], [738, 159], [561, 335], [116, 433], [385, 427], [153, 385], [432, 249]], 'dist_2': [[107, 161], [424, 107], [694, 67], [115, 297], [603, 423], [517, 68], [200, 383], [160, 430], [694, 200], [204, 199], [387, 380], [474, 382]]}, {'targ': [[426, 206], [108, 153], [343, 206], [469, 386], [653, 198], [381, 333], [473, 246], [430, 377], [467, 154], [788, 386], [343, 384]], 'dist_1': [[608, 208], [248, 203], [792, 296], [558, 288], [426, 107], [203, 296], [699, 342], [698, 199], [470, 426]], 'dist_2': [[514, 433], [786, 112], [342, 250], [743, 336], [70, 383], [429, 338], [156, 432], [65, 242], [700, 69], [63, 332]]}, {'targ': [[242, 289], [517, 110], [380, 155], [791, 202], [521, 338], [695, 205], [107, 342], [73, 253], [294, 199], [386, 250]], 'dist_1': [[741, 72], [512, 386], [379, 203], [109, 111], [253, 244], [160, 245], [200, 338], [558, 245], [63, 208], [383, 297]], 'dist_2': [[606, 291], [787, 386], [693, 293], [294, 73], [73, 153], [467, 242], [294, 162], [790, 109], [433, 379], [697, 249]]}, {'targ': [[693, 243], [783, 340], [654, 433], [744, 378], [432, 295], [111, 427]], 'dist_1': [[294, 424], [387, 248], [69, 430], [64, 116], [243, 242], [789, 422], [519, 253], [787, 206], [467, 378], [473, 253], [515, 380], [606, 202]], 'dist_2': [[381, 293], [114, 245], [430, 114], [206, 117], [294, 113], [692, 381], [158, 152], [383, 387], [73, 383], [118, 65], [335, 291], [382, 154]]}, {'targ': [[384, 245], [424, 432], [697, 113], [788, 110], [562, 289], [606, 340], [247, 385], [198, 290]], 'dist_1': [[603, 292], [468, 336], [152, 118], [332, 208], [432, 248], [66, 388], [694, 297], [107, 338], [152, 423], [520, 332], [694, 433]], 'dist_2': [[382, 197], [203, 65], [567, 433], [560, 204], [514, 203], [741, 294], [380, 426], [692, 163], [290, 339], [152, 200], [791, 208]]}], 2: [{'targ': [[65, 62], [332, 253], [205, 202], [653, 380], [422, 68], [696, 204], [199, 292], [566, 291], [702, 298], [477, 425]], 'dist_1': [[740, 428], [201, 343], [516, 428], [62, 244], [567, 198], [426, 386], [520, 378], [207, 380], [108, 387], [69, 422]], 'dist_2': [[558, 107], [242, 339], [109, 197], [518, 203], [653, 248], [198, 72], [604, 201], [208, 108], [66, 155], [788, 332]]}, {'targ': [[163, 107], [475, 426], [157, 246], [652, 203], [424, 205], [746, 116], [159, 64], [73, 290], [208, 153], [378, 68], [111, 111]], 'dist_1': [[342, 425], [739, 246], [428, 251], [298, 386], [748, 422], [786, 200], [697, 292], [610, 62], [384, 198]], 'dist_2': [[297, 206], [292, 338], [72, 204], [565, 297], [429, 387], [470, 107], [290, 158], [474, 289], [699, 114], [154, 160]]}, {'targ': [[295, 205], [743, 342], [115, 198], [560, 341], [655, 197], [388, 381], [153, 65], [739, 67], [567, 163]], 'dist_1': [[110, 70], [160, 163], [789, 429], [295, 63], [692, 118], [116, 246], [602, 163], [333, 156], [658, 68], [423, 161]], 'dist_2': [[341, 115], [340, 379], [288, 155], [520, 242], [289, 381], [697, 253], [424, 383], [380, 298], [384, 116], [651, 157], [336, 64]]}, {'targ': [[289, 338], [112, 381], [163, 116], [702, 110], [468, 247], [651, 107], [694, 380], [200, 294]], 'dist_1': [[199, 334], [338, 73], [612, 246], [791, 379], [563, 197], [652, 292], [698, 198], [433, 290], [342, 380], [294, 387], [562, 250]], 'dist_2': [[785, 297], [152, 378], [297, 290], [701, 244], [603, 204], [650, 426], [517, 66], [602, 162], [252, 155], [472, 65], [737, 202]]}, {'targ': [[207, 112], [249, 381], [787, 69], [740, 73], [476, 425], [71, 108]], 'dist_1': [[605, 200], [378, 70], [65, 73], [790, 158], [470, 377], [517, 429], [744, 378], [289, 201], [610, 382], [604, 71], [337, 426], [333, 334]], 'dist_2': [[565, 153], [700, 377], [429, 427], [695, 69], [744, 246], [380, 426], [560, 288], [246, 199], [658, 250], [152, 289], [162, 425], [387, 118]]}, {'targ': [[291, 207], [562, 111], [205, 197], [64, 334], [109, 429], [475, 298], [109, 294], [377, 73], [291, 158]], 'dist_1': [[739, 207], [651, 427], [163, 115], [159, 378], [655, 117], [657, 156], [343, 295], [111, 66], [791, 197], [379, 203]], 'dist_2': [[604, 291], [293, 378], [425, 422], [695, 243], [785, 332], [785, 383], [785, 249], [249, 292], [332, 340], [156, 249], [604, 197]]}, {'targ': [[154, 73], [203, 108], [793, 160], [470, 110], [250, 208], [473, 249], [563, 159], [562, 108], [117, 203], [287, 388], [428, 62], [388, 198]], 'dist_1': [[199, 378], [560, 243], [514, 208], [422, 159], [343, 428], [658, 207], [335, 388], [696, 385], [336, 118]], 'dist_2': [[747, 433], [112, 423], [658, 69], [786, 292], [116, 108], [520, 251], [107, 343], [378, 116], [740, 71]]}], 3: [{'targ': [[70, 242], [699, 343], [743, 200], [294, 292], [342, 116]], 'dist_1': [[247, 157], [338, 336], [338, 62], [342, 208], [788, 110], [155, 243], [422, 423], [243, 113], [388, 296], [64, 387], [523, 202], [520, 429], [431, 163], [647, 294], [243, 208]], 'dist_2': [[63, 71], [290, 428], [67, 160], [115, 424], [562, 424], [606, 425], [117, 379], [654, 115], [695, 289], [378, 388], [108, 118], [199, 379], [158, 337], [609, 116], [153, 426]]}, {'targ': [[342, 159], [472, 335], [469, 296], [610, 157], [653, 114], [743, 206], [72, 338], [335, 108], [562, 292], [789, 158], [693, 385], [559, 109], [562, 336], [379, 295]], 'dist_1': [[426, 197], [702, 431], [243, 198], [782, 429], [377, 243], [113, 201], [739, 112], [424, 70], [784, 62], [743, 62]], 'dist_2': [[789, 252], [469, 110], [747, 290], [156, 290], [159, 113], [200, 342], [653, 158], [298, 72], [697, 115], [111, 336], [432, 296]]}, {'targ': [[656, 332], [432, 341], [649, 71], [748, 384], [297, 158], [745, 116], [793, 208]], 'dist_1': [[246, 68], [650, 200], [602, 70], [784, 337], [73, 296], [699, 206], [109, 208], [155, 243], [521, 383], [207, 247], [477, 247], [565, 292], [297, 422], [563, 385]], 'dist_2': [[563, 68], [477, 65], [745, 334], [433, 246], [388, 208], [333, 159], [199, 202], [741, 242], [69, 380], [290, 111], [748, 71], [378, 338], [160, 425], [521, 334]]}, {'targ': [[702, 156], [517, 153], [694, 200], [117, 109], [153, 107], [475, 115], [339, 201]], 'dist_1': [[647, 333], [515, 425], [341, 68], [423, 288], [296, 429], [332, 109], [384, 253], [335, 157], [156, 202], [471, 69], [65, 251], [153, 427], [473, 202], [298, 293]], 'dist_2': [[472, 152], [422, 253], [383, 112], [787, 118], [793, 293], [118, 382], [604, 251], [698, 66], [377, 199], [380, 162], [428, 110], [206, 288], [657, 433], [295, 203]]}, {'targ': [[747, 424], [388, 70], [427, 208], [294, 246], [517, 246], [381, 381], [202, 424], [692, 332]], 'dist_1': [[206, 388], [108, 160], [786, 111], [334, 159], [473, 342], [476, 388], [294, 117], [62, 291], [522, 200], [64, 112], [338, 426], [202, 115], [431, 291]], 'dist_2': [[515, 340], [202, 248], [702, 153], [160, 426], [379, 332], [792, 378], [387, 292], [747, 379], [200, 202], [558, 205], [429, 338], [568, 341], [703, 64], [66, 430]]}, {'targ': [[62, 338], [787, 432], [787, 386], [692, 70], [432, 242]], 'dist_1': [[287, 117], [513, 199], [422, 204], [517, 63], [290, 245], [71, 382], [478, 382], [516, 377], [786, 334], [745, 242], [385, 424], [783, 73], [287, 207], [744, 290], [568, 242]], 'dist_2': [[470, 117], [515, 161], [113, 200], [386, 251], [698, 112], [425, 117], [161, 294], [207, 338], [656, 253], [703, 159], [739, 342], [65, 243], [107, 161], [476, 159], [745, 426]]}, {'targ': [[156, 342], [64, 294], [698, 62], [692, 425], [163, 206], [472, 334], [563, 245], [517, 203]], 'dist_1': [[739, 62], [73, 377], [610, 287], [118, 156], [154, 430], [477, 431], [422, 242], [652, 153], [522, 156], [338, 116], [472, 114], [333, 197], [650, 199]], 'dist_2': [[242, 384], [288, 107], [288, 287], [521, 251], [700, 386], [654, 64], [427, 108], [467, 295], [428, 158], [296, 337], [521, 386], [341, 69], [742, 433], [604, 332]]}], 4: [{'targ': [[386, 65], [72, 424], [336, 251], [152, 295], [746, 294], [333, 69], [567, 154]], 'dist_1': [[378, 377], [343, 153], [793, 107], [558, 63], [476, 288], [156, 250], [109, 294], [112, 252], [117, 432], [67, 294], [71, 243], [154, 66], [379, 433], [513, 201]], 'dist_2': [[783, 160], [702, 253], [467, 199], [250, 425], [207, 381], [203, 109], [518, 333], [429, 291], [71, 62], [379, 160], [471, 163], [199, 198], [112, 337], [608, 157]]}, {'targ': [[64, 245], [698, 161], [250, 332], [472, 152], [520, 161], [518, 246], [200, 332], [784, 298], [64, 161], [702, 248], [158, 251], [425, 380], [69, 298]], 'dist_1': [[295, 65], [518, 197], [739, 296], [332, 73], [432, 114], [246, 63], [519, 107], [521, 68], [478, 197], [198, 251], [698, 116]], 'dist_2': [[605, 290], [199, 289], [294, 430], [790, 201], [472, 384], [296, 207], [158, 430], [565, 423], [692, 289], [747, 64], [62, 378]]}, {'targ': [[73, 117], [70, 248], [251, 153], [568, 66], [112, 388], [247, 423], [613, 201], [607, 333], [340, 242], [609, 291], [433, 115]], 'dist_1': [[653, 378], [423, 343], [297, 66], [152, 431], [336, 337], [71, 153], [566, 200], [606, 247], [786, 107], [658, 332], [793, 333], [118, 107]], 'dist_2': [[698, 252], [602, 379], [793, 68], [153, 114], [513, 197], [515, 243], [745, 252], [476, 290], [518, 336], [651, 115], [741, 68], [115, 201]]}, {'targ': [[155, 161], [478, 251], [786, 205], [783, 342], [793, 384], [522, 242], [382, 113], [566, 205]], 'dist_1': [[475, 380], [472, 206], [607, 423], [521, 158], [514, 429], [340, 116], [152, 333], [653, 289], [423, 294], [613, 114], [203, 246], [386, 388], [291, 67]], 'dist_2': [[154, 430], [471, 118], [72, 295], [559, 334], [251, 252], [604, 199], [156, 381], [605, 291], [70, 117], [423, 332], [385, 248], [425, 208], [295, 198], [341, 386]]}, {'targ': [[337, 116], [467, 156], [606, 342], [116, 66], [516, 332], [379, 68], [433, 294], [158, 108], [653, 384], [337, 200], [744, 67], [426, 342], [693, 341]], 'dist_1': [[514, 378], [159, 208], [789, 64], [560, 377], [520, 113], [522, 203], [334, 72], [203, 298], [519, 298], [517, 62], [557, 69]], 'dist_2': [[208, 73], [110, 388], [791, 296], [560, 111], [653, 288], [738, 298], [67, 251], [202, 110], [291, 333], [288, 113], [786, 425]]}, {'targ': [[738, 116], [611, 386], [243, 382], [111, 68], [783, 332], [656, 157]], 'dist_1': [[513, 206], [748, 430], [162, 433], [696, 340], [204, 377], [607, 111], [384, 244], [655, 207], [340, 298], [115, 199], [340, 245], [288, 155], [604, 207], [741, 201]], 'dist_2': [[563, 204], [253, 425], [562, 243], [607, 334], [655, 383], [522, 152], [792, 432], [154, 152], [379, 333], [605, 429], [694, 197], [205, 293], [473, 382], [72, 157], [523, 70]]}, {'targ': [[694, 338], [247, 427], [118, 383], [471, 292], [298, 296], [110, 114], [332, 386], [338, 336], [651, 332], [604, 381], [472, 244], [242, 382], [65, 288], [695, 250]], 'dist_1': [[335, 246], [747, 247], [336, 73], [428, 67], [567, 68], [334, 113], [383, 156], [163, 111], [744, 113], [203, 206]], 'dist_2': [[246, 159], [560, 336], [422, 198], [294, 107], [648, 197], [426, 108], [612, 72], [68, 250], [341, 295], [69, 63], [477, 336]]}]}, 'Ls': {0: [{'targ': [[788, 197], [470, 298], [198, 152]], 'dist_1': [[606, 115], [341, 381], [246, 242]], 'dist_2': [[293, 247], [293, 197], [341, 297], [107, 207]]}, {'targ': [[332, 245], [424, 338]], 'dist_1': [[202, 291], [205, 337], [612, 433], [523, 114]], 'dist_2': [[67, 425], [649, 291], [650, 200], [287, 153]]}, {'targ': [[742, 336], [343, 208]], 'dist_1': [[162, 198], [518, 289], [650, 290], [512, 335]], 'dist_2': [[163, 337], [698, 67], [248, 63], [249, 110]]}, {'targ': [[109, 161], [199, 333], [742, 203]], 'dist_1': [[423, 378], [514, 427], [109, 243]], 'dist_2': [[431, 248], [567, 152], [693, 334], [604, 385]]}, {'targ': [[71, 158], [428, 197]], 'dist_1': [[747, 381], [111, 338], [515, 65], [737, 290]], 'dist_2': [[747, 341], [476, 341], [698, 162], [609, 73]]}, {'targ': [[785, 245], [745, 160]], 'dist_1': [[245, 72], [604, 423], [340, 162], [339, 200]], 'dist_2': [[469, 242], [152, 383], [790, 298], [108, 294]]}, {'targ': [[162, 431], [739, 206], [62, 155], [473, 387]], 'dist_1': [[562, 333], [377, 335], [289, 67]], 'dist_2': [[523, 381], [107, 109], [424, 112]]}], 1: [{'targ': [[693, 202], [793, 287], [523, 248]], 'dist_1': [[113, 379], [694, 70], [242, 380], [163, 386]], 'dist_2': [[429, 243], [66, 294], [787, 65], [242, 336], [693, 152]]}, {'targ': [[612, 426], [342, 69]], 'dist_1': [[744, 426], [158, 287], [518, 244], [244, 73], [248, 155]], 'dist_2': [[333, 208], [161, 206], [382, 382], [287, 66], [656, 428]]}, {'targ': [[656, 377], [246, 340], [65, 287]], 'dist_1': [[522, 296], [385, 73], [784, 379], [786, 245]], 'dist_2': [[107, 161], [424, 107], [694, 67], [115, 297], [603, 423]]}, {'targ': [[426, 206], [108, 153], [343, 206], [469, 386], [653, 198]], 'dist_1': [[608, 208], [248, 203], [792, 296]], 'dist_2': [[514, 433], [786, 112], [342, 250], [743, 336]]}, {'targ': [[242, 289], [517, 110], [380, 155]], 'dist_1': [[741, 72], [512, 386], [379, 203], [109, 111]], 'dist_2': [[606, 291], [787, 386], [693, 293], [294, 73], [73, 153]]}, {'targ': [[693, 243], [783, 340], [654, 433], [744, 378], [432, 295]], 'dist_1': [[294, 424], [387, 248], [69, 430]], 'dist_2': [[381, 293], [114, 245], [430, 114], [206, 117]]}, {'targ': [[384, 245], [424, 432], [697, 113], [788, 110], [562, 289]], 'dist_1': [[603, 292], [468, 336], [152, 118]], 'dist_2': [[382, 197], [203, 65], [567, 433], [560, 204]]}], 2: [{'targ': [[65, 62], [332, 253], [205, 202]], 'dist_1': [[740, 428], [201, 343], [516, 428], [62, 244]], 'dist_2': [[558, 107], [242, 339], [109, 197], [518, 203], [653, 248]]}, {'targ': [[163, 107], [475, 426], [157, 246]], 'dist_1': [[342, 425], [739, 246], [428, 251], [298, 386]], 'dist_2': [[297, 206], [292, 338], [72, 204], [565, 297], [429, 387]]}, {'targ': [[295, 205], [743, 342], [115, 198], [560, 341], [655, 197]], 'dist_1': [[110, 70], [160, 163], [789, 429]], 'dist_2': [[341, 115], [340, 379], [288, 155], [520, 242]]}, {'targ': [[289, 338], [112, 381], [163, 116], [702, 110]], 'dist_1': [[199, 334], [338, 73], [612, 246], [791, 379]], 'dist_2': [[785, 297], [152, 378], [297, 290], [701, 244]]}, {'targ': [[207, 112], [249, 381], [787, 69]], 'dist_1': [[605, 200], [378, 70], [65, 73], [790, 158]], 'dist_2': [[565, 153], [700, 377], [429, 427], [695, 69], [744, 246]]}, {'targ': [[291, 207], [562, 111], [205, 197]], 'dist_1': [[739, 207], [651, 427], [163, 115], [159, 378]], 'dist_2': [[604, 291], [293, 378], [425, 422], [695, 243], [785, 332]]}, {'targ': [[154, 73], [203, 108], [793, 160]], 'dist_1': [[199, 378], [560, 243], [514, 208], [422, 159]], 'dist_2': [[747, 433], [112, 423], [658, 69], [786, 292], [116, 108]]}], 3: [{'targ': [[70, 242], [699, 343]], 'dist_1': [[247, 157], [338, 336], [338, 62], [342, 208], [788, 110], [155, 243]], 'dist_2': [[63, 71], [290, 428], [67, 160], [115, 424], [562, 424], [606, 425]]}, {'targ': [[342, 159], [472, 335], [469, 296]], 'dist_1': [[426, 197], [702, 431], [243, 198], [782, 429], [377, 243]], 'dist_2': [[789, 252], [469, 110], [747, 290], [156, 290], [159, 113], [200, 342]]}, {'targ': [[656, 332], [432, 341], [649, 71], [748, 384], [297, 158], [745, 116]], 'dist_1': [[246, 68], [650, 200], [602, 70], [784, 337]], 'dist_2': [[563, 68], [477, 65], [745, 334], [433, 246]]}, {'targ': [[702, 156], [517, 153]], 'dist_1': [[647, 333], [515, 425], [341, 68], [423, 288], [296, 429], [332, 109]], 'dist_2': [[472, 152], [422, 253], [383, 112], [787, 118], [793, 293], [118, 382]]}, {'targ': [[747, 424], [388, 70]], 'dist_1': [[206, 388], [108, 160], [786, 111], [334, 159], [473, 342], [476, 388]], 'dist_2': [[515, 340], [202, 248], [702, 153], [160, 426], [379, 332], [792, 378]]}, {'targ': [[62, 338], [787, 432], [787, 386], [692, 70], [432, 242]], 'dist_1': [[287, 117], [513, 199], [422, 204], [517, 63]], 'dist_2': [[470, 117], [515, 161], [113, 200], [386, 251], [698, 112]]}, {'targ': [[156, 342], [64, 294], [698, 62]], 'dist_1': [[739, 62], [73, 377], [610, 287], [118, 156], [154, 430]], 'dist_2': [[242, 384], [288, 107], [288, 287], [521, 251], [700, 386], [654, 64]]}], 4: [{'targ': [[386, 65], [72, 424], [336, 251], [152, 295]], 'dist_1': [[378, 377], [343, 153], [793, 107], [558, 63], [476, 288]], 'dist_2': [[783, 160], [702, 253], [467, 199], [250, 425], [207, 381]]}, {'targ': [[64, 245], [698, 161], [250, 332], [472, 152], [520, 161], [518, 246]], 'dist_1': [[295, 65], [518, 197], [739, 296], [332, 73]], 'dist_2': [[605, 290], [199, 289], [294, 430], [790, 201]]}, {'targ': [[73, 117], [70, 248], [251, 153], [568, 66], [112, 388]], 'dist_1': [[653, 378], [423, 343], [297, 66], [152, 431]], 'dist_2': [[698, 252], [602, 379], [793, 68], [153, 114], [513, 197]]}, {'targ': [[155, 161], [478, 251]], 'dist_1': [[475, 380], [472, 206], [607, 423], [521, 158], [514, 429], [340, 116]], 'dist_2': [[154, 430], [471, 118], [72, 295], [559, 334], [251, 252], [604, 199]]}, {'targ': [[337, 116], [467, 156]], 'dist_1': [[514, 378], [159, 208], [789, 64], [560, 377], [520, 113], [522, 203]], 'dist_2': [[208, 73], [110, 388], [791, 296], [560, 111], [653, 288], [738, 298]]}, {'targ': [[738, 116], [611, 386], [243, 382]], 'dist_1': [[513, 206], [748, 430], [162, 433], [696, 340], [204, 377]], 'dist_2': [[563, 204], [253, 425], [562, 243], [607, 334], [655, 383], [522, 152]]}, {'targ': [[694, 338], [247, 427]], 'dist_1': [[335, 246], [747, 247], [336, 73], [428, 67], [567, 68], [334, 113]], 'dist_2': [[246, 159], [560, 336], [422, 198], [294, 107], [648, 197], [426, 108]]}]}
            'Hs': {0: [{'targ': [[155, 162], [424, 208], [108, 112], [384, 71], [289, 200], [782, 109], [521, 107], [109, 425], [560, 159]], 'dist_1': [[387, 337], [69, 379], [296, 156], [65, 247], [784, 245], [745, 203], [521, 203], [787, 294]], 'dist_2': [[607, 72], [605, 159], [692, 65], [425, 252], [433, 433], [155, 291], [288, 342], [468, 198]]}, {'targ': [[379, 116], [650, 205], [471, 423], [69, 292], [387, 155], [295, 433], [423, 422], [741, 245], [609, 242], [339, 422]], 'dist_1': [[62, 423], [208, 247], [611, 343], [201, 334], [608, 426], [203, 206], [561, 247]], 'dist_2': [[468, 206], [478, 157], [160, 116], [253, 332], [650, 156], [155, 162], [790, 248], [789, 117]]}, {'targ': [[154, 65], [424, 115], [791, 117], [425, 296], [159, 297], [71, 426]], 'dist_1': [[693, 63], [156, 204], [518, 288], [243, 296], [430, 65], [205, 378], [246, 248], [793, 293], [341, 297]], 'dist_2': [[339, 66], [160, 248], [163, 153], [294, 112], [522, 429], [788, 430], [290, 335], [113, 382], [566, 247], [470, 206]]}, {'targ': [[242, 422], [206, 343], [656, 253], [743, 66], [744, 424]], 'dist_1': [[109, 248], [251, 116], [473, 379], [516, 204], [247, 64], [207, 377], [783, 289], [694, 157], [424, 248], [337, 115]], 'dist_2': [[564, 72], [655, 198], [112, 207], [205, 111], [609, 249], [380, 111], [650, 288], [336, 243], [699, 69], [343, 157]]}, {'targ': [[199, 152], [114, 161], [245, 246], [656, 293], [657, 250], [693, 252], [612, 343], [197, 423], [341, 294]], 'dist_1': [[789, 201], [603, 73], [562, 72], [424, 113], [649, 387], [161, 338], [782, 246], [475, 160]], 'dist_2': [[520, 70], [113, 385], [107, 243], [478, 73], [108, 332], [519, 242], [69, 382], [700, 430]]}, {'targ': [[694, 155], [475, 245], [295, 427], [783, 287], [697, 381], [68, 201], [651, 62], [557, 332], [652, 297]], 'dist_1': [[607, 422], [610, 68], [603, 112], [110, 70], [204, 163], [156, 153], [387, 431], [514, 203]], 'dist_2': [[741, 298], [560, 425], [156, 423], [152, 203], [289, 292], [107, 378], [565, 71], [469, 112]]}, {'targ': [[340, 380], [739, 291], [605, 296], [251, 208], [204, 381], [429, 65], [107, 383]], 'dist_1': [[387, 73], [429, 381], [603, 154], [110, 202], [251, 429], [428, 197], [474, 159], [385, 115], [743, 108]], 'dist_2': [[333, 197], [388, 378], [246, 339], [702, 199], [557, 291], [561, 332], [603, 199], [337, 111], [789, 205]]}], 1: [{'targ': [[607, 113], [379, 343], [290, 248], [70, 432], [69, 338], [288, 296], [515, 297], [71, 384], [72, 156], [514, 199], [605, 335], [428, 110]], 'dist_1': [[246, 248], [560, 159], [740, 423], [335, 253], [386, 206], [702, 204], [695, 385], [655, 387], [163, 159]], 'dist_2': [[67, 115], [652, 67], [341, 336], [342, 423], [474, 66], [517, 384], [695, 71], [612, 71], [298, 69]]}, {'targ': [[380, 384], [386, 108], [745, 207], [560, 377], [158, 68], [201, 247], [656, 377]], 'dist_1': [[341, 64], [513, 427], [252, 246], [207, 72], [158, 387], [650, 69], [72, 118], [292, 152], [698, 424], [73, 380], [297, 117]], 'dist_2': [[521, 288], [201, 291], [202, 113], [563, 117], [290, 70], [244, 201], [388, 332], [298, 339], [338, 154], [380, 207], [701, 118], [157, 292]]}, {'targ': [[288, 112], [63, 387], [156, 208], [293, 297], [519, 204]], 'dist_1': [[116, 208], [564, 115], [203, 204], [746, 382], [657, 207], [431, 207], [700, 428], [467, 335], [741, 433], [251, 288], [381, 252], [287, 338]], 'dist_2': [[783, 155], [197, 432], [253, 153], [611, 203], [697, 296], [429, 157], [250, 118], [287, 248], [425, 427], [291, 160], [655, 334], [207, 249], [702, 65]]}, {'targ': [[701, 249], [422, 430], [113, 379], [162, 158], [383, 201], [785, 386], [432, 111], [519, 244]], 'dist_1': [[291, 424], [744, 427], [647, 113], [737, 199], [251, 428], [557, 109], [338, 428], [383, 335], [608, 423], [71, 112], [253, 246]], 'dist_2': [[153, 388], [467, 201], [472, 161], [562, 207], [244, 163], [343, 386], [654, 340], [744, 159], [199, 298], [429, 199], [470, 383]]}, {'targ': [[343, 158], [477, 154], [159, 162], [654, 62], [118, 201]], 'dist_1': [[422, 388], [337, 379], [154, 386], [157, 206], [512, 298], [73, 71], [742, 205], [247, 247], [748, 69], [700, 427], [341, 115], [431, 199]], 'dist_2': [[737, 422], [788, 253], [471, 289], [791, 336], [116, 159], [433, 425], [383, 381], [198, 117], [738, 336], [702, 157], [558, 157], [523, 202], [379, 159]]}, {'targ': [[468, 158], [609, 154], [67, 108], [377, 73], [72, 333], [288, 386], [787, 198], [738, 293], [63, 69]], 'dist_1': [[475, 429], [693, 340], [116, 387], [207, 287], [521, 197], [340, 155], [203, 378], [159, 202], [790, 426], [249, 197]], 'dist_2': [[606, 109], [338, 110], [431, 289], [653, 430], [748, 158], [253, 386], [333, 431], [520, 288], [202, 250], [424, 379], [155, 291]]}, {'targ': [[519, 62], [478, 245], [738, 157], [157, 72], [64, 337], [380, 245], [741, 65]], 'dist_1': [[64, 242], [515, 246], [558, 159], [699, 67], [67, 152], [252, 424], [379, 424], [250, 70], [604, 287], [71, 294], [70, 378]], 'dist_2': [[242, 337], [433, 427], [655, 116], [243, 118], [155, 291], [199, 291], [251, 200], [116, 294], [698, 294], [611, 422], [649, 63], [380, 288]]}], 2: [{'targ': [[745, 291], [475, 387], [476, 160], [782, 251], [62, 158], [433, 291], [251, 163], [647, 205], [468, 428], [610, 426], [515, 156]], 'dist_1': [[243, 247], [701, 152], [787, 107], [560, 161], [291, 200], [297, 289], [604, 384], [342, 336], [202, 429]], 'dist_2': [[793, 339], [205, 252], [432, 153], [701, 251], [557, 287], [430, 243], [607, 197], [335, 289], [253, 388], [611, 246]]}, {'targ': [[519, 118], [250, 200], [381, 379], [655, 65]], 'dist_1': [[70, 342], [605, 383], [701, 198], [607, 333], [64, 152], [785, 112], [783, 431], [384, 118], [203, 342], [613, 252], [65, 201], [613, 198], [563, 430]], 'dist_2': [[424, 290], [515, 386], [470, 163], [114, 158], [560, 387], [696, 293], [157, 111], [698, 64], [335, 117], [470, 384], [107, 67], [788, 67], [295, 386]]}, {'targ': [[739, 71], [521, 111], [384, 72], [701, 208], [609, 297], [154, 64], [66, 430], [702, 155], [246, 118], [557, 112]], 'dist_1': [[293, 242], [743, 294], [652, 433], [515, 343], [297, 426], [564, 63], [287, 384], [606, 379], [153, 113], [788, 426]], 'dist_2': [[784, 160], [478, 247], [519, 427], [117, 290], [251, 249], [243, 335], [248, 424], [115, 199], [242, 384], [787, 252]]}, {'targ': [[473, 251], [381, 336], [602, 71], [208, 424], [111, 384], [698, 154], [340, 206]], 'dist_1': [[425, 207], [112, 425], [432, 428], [153, 251], [429, 295], [696, 198], [426, 342], [703, 427], [297, 64], [604, 334], [565, 297]], 'dist_2': [[699, 117], [475, 289], [379, 295], [67, 287], [700, 339], [162, 333], [747, 155], [162, 152], [247, 63], [243, 289], [335, 425], [111, 340]]}, {'targ': [[70, 248], [514, 72], [648, 382], [117, 251], [156, 207], [652, 339], [557, 342], [472, 386], [608, 294], [295, 249], [296, 387]], 'dist_1': [[246, 69], [422, 253], [72, 159], [612, 161], [738, 242], [653, 159], [516, 288], [431, 422], [612, 114]], 'dist_2': [[199, 423], [792, 332], [425, 201], [378, 242], [242, 114], [343, 386], [113, 426], [115, 208], [109, 287], [388, 292]]}, {'targ': [[563, 387], [70, 423], [198, 337], [656, 380], [693, 198], [388, 116], [197, 72]], 'dist_1': [[564, 114], [198, 117], [116, 339], [656, 157], [69, 107], [648, 246], [422, 73], [289, 248], [157, 202], [158, 156], [73, 205]], 'dist_2': [[428, 109], [789, 289], [202, 424], [432, 377], [387, 342], [609, 422], [243, 108], [475, 379], [245, 68], [332, 68], [468, 430], [341, 428]]}, {'targ': [[523, 384], [558, 154], [514, 296], [701, 205], [426, 386], [197, 244], [430, 428], [252, 203], [380, 386], [108, 287]], 'dist_1': [[693, 71], [110, 385], [385, 163], [63, 245], [161, 430], [158, 110], [428, 289], [432, 66], [109, 425], [381, 428]], 'dist_2': [[473, 340], [566, 335], [738, 430], [290, 245], [738, 380], [658, 246], [744, 289], [793, 63], [294, 383], [245, 64]]}], 3: [{'targ': [[608, 249], [68, 422], [114, 336], [513, 152], [743, 424], [296, 62], [288, 156], [208, 243], [247, 424], [202, 296], [474, 288], [198, 73]], 'dist_1': [[200, 157], [692, 378], [157, 429], [340, 118], [696, 163], [63, 205], [649, 383], [787, 342], [610, 199], [296, 113], [698, 205]], 'dist_2': [[383, 111], [245, 246], [603, 107], [739, 205], [381, 162], [242, 162], [428, 429], [657, 334], [519, 116], [159, 296], [153, 333], [658, 242]]}, {'targ': [[647, 387], [650, 339], [115, 337], [473, 339], [523, 155], [562, 116], [608, 378], [336, 65]], 'dist_1': [[155, 431], [788, 287], [476, 253], [741, 113], [246, 288], [290, 70], [248, 160], [558, 197], [69, 388], [738, 388], [652, 62], [568, 429], [793, 107]], 'dist_2': [[520, 292], [162, 197], [698, 296], [694, 246], [298, 250], [746, 296], [431, 108], [339, 334], [154, 63], [112, 198], [116, 295], [475, 65], [246, 341], [512, 118]]}, {'targ': [[433, 202], [655, 66], [746, 72], [602, 384]], 'dist_1': [[563, 72], [513, 62], [603, 200], [155, 199], [741, 336], [158, 422], [476, 152], [745, 200], [607, 288], [428, 153], [112, 66], [114, 332], [566, 154], [422, 290], [379, 154]], 'dist_2': [[610, 118], [657, 114], [745, 249], [65, 108], [427, 117], [290, 381], [563, 251], [602, 156], [289, 67], [518, 158], [157, 160], [378, 72], [297, 332], [197, 158], [654, 160], [335, 337]]}, {'targ': [[742, 379], [118, 332], [112, 423], [107, 67], [384, 154], [339, 66]], 'dist_1': [[647, 64], [472, 425], [652, 110], [784, 339], [557, 430], [562, 250], [514, 377], [293, 198], [202, 112], [245, 156], [66, 427], [747, 423], [521, 422], [64, 69]], 'dist_2': [[63, 110], [380, 292], [557, 201], [383, 431], [519, 246], [203, 333], [472, 333], [73, 385], [341, 336], [198, 432], [748, 117], [478, 197], [693, 111], [649, 247], [567, 377]]}, {'targ': [[793, 202], [613, 428], [205, 294], [296, 66], [648, 427], [152, 110], [111, 297], [387, 156], [430, 73], [431, 336]], 'dist_1': [[607, 294], [336, 381], [746, 380], [701, 111], [742, 200], [292, 382], [295, 157], [477, 71], [337, 73], [157, 335], [789, 107], [565, 114]], 'dist_2': [[386, 433], [523, 245], [647, 386], [63, 433], [698, 334], [113, 109], [568, 428], [514, 67], [520, 333], [558, 244], [782, 65], [738, 431], [336, 202]]}, {'targ': [[378, 197], [518, 248], [647, 242], [112, 246], [291, 118], [386, 423], [428, 337], [197, 162]], 'dist_1': [[68, 163], [467, 71], [115, 200], [475, 288], [787, 160], [111, 382], [698, 110], [648, 343], [568, 381], [517, 342], [429, 71], [514, 116], [157, 198]], 'dist_2': [[384, 251], [606, 199], [342, 377], [652, 115], [748, 65], [473, 162], [522, 158], [156, 114], [200, 383], [248, 65], [290, 337], [520, 67], [292, 430], [252, 338]]}, {'targ': [[205, 423], [152, 339], [695, 245], [701, 107], [205, 198], [109, 161], [694, 429], [611, 116], [605, 341], [785, 338], [116, 294]], 'dist_1': [[603, 292], [152, 432], [199, 335], [521, 118], [693, 157], [652, 427], [694, 336], [248, 111], [422, 251], [387, 296], [385, 251], [66, 110]], 'dist_2': [[243, 343], [613, 202], [334, 426], [207, 114], [611, 159], [249, 203], [654, 290], [200, 160], [467, 114], [648, 71], [791, 64], [289, 248]]}], 4: [{'targ': [[652, 290], [378, 206], [379, 62], [377, 333], [424, 333]], 'dist_1': [[65, 65], [111, 384], [655, 425], [477, 432], [516, 424], [297, 337], [739, 200], [202, 332], [333, 294], [163, 339], [242, 112], [342, 338], [557, 198], [111, 427], [653, 341]], 'dist_2': [[108, 293], [338, 155], [564, 107], [67, 156], [341, 115], [163, 157], [296, 162], [296, 295], [63, 429], [155, 202], [648, 378], [785, 247], [746, 384], [568, 433], [380, 387]]}, {'targ': [[383, 66], [153, 107], [298, 341], [116, 162], [336, 338], [432, 380]], 'dist_1': [[426, 199], [424, 431], [289, 108], [652, 205], [702, 247], [607, 110], [478, 339], [298, 67], [379, 203], [695, 381], [791, 337], [292, 159], [696, 291], [695, 200]], 'dist_2': [[342, 162], [249, 247], [294, 208], [423, 158], [343, 118], [792, 111], [523, 432], [113, 294], [565, 64], [522, 381], [294, 249], [245, 296], [522, 69], [652, 160], [161, 208]]}, {'targ': [[609, 113], [473, 384], [558, 245], [606, 247], [203, 207], [62, 380], [201, 290], [696, 65], [207, 242], [379, 386]], 'dist_1': [[513, 163], [702, 426], [557, 207], [783, 298], [249, 384], [155, 432], [470, 341], [293, 153], [63, 208], [207, 109], [790, 425], [293, 116]], 'dist_2': [[340, 246], [247, 199], [791, 117], [297, 383], [568, 433], [109, 206], [152, 381], [468, 291], [783, 199], [558, 65], [516, 431], [428, 290], [612, 385]]}, {'targ': [[289, 115], [110, 289], [740, 112], [289, 381], [522, 161], [647, 382], [693, 66], [152, 295], [789, 203], [612, 289]], 'dist_1': [[206, 198], [293, 423], [203, 68], [63, 379], [430, 424], [161, 109], [470, 379], [703, 341], [337, 110], [517, 379], [338, 383], [557, 62]], 'dist_2': [[782, 116], [746, 379], [293, 250], [338, 246], [743, 292], [428, 246], [605, 69], [339, 424], [431, 155], [692, 383], [604, 247], [647, 117], [162, 64]]}, {'targ': [[557, 386], [152, 68], [692, 63], [474, 334], [786, 107], [791, 154], [377, 111], [159, 207], [153, 247], [380, 200], [338, 115]], 'dist_1': [[116, 197], [748, 73], [427, 332], [512, 72], [110, 343], [204, 65], [513, 337], [475, 295], [697, 153], [432, 287], [744, 288], [64, 202]], 'dist_2': [[647, 422], [386, 288], [564, 243], [513, 253], [692, 423], [207, 297], [207, 116], [71, 117], [697, 251], [431, 114], [613, 291], [650, 289]]}, {'targ': [[560, 110], [426, 342], [703, 109], [566, 287], [697, 161], [292, 113], [159, 290], [469, 340], [562, 387]], 'dist_1': [[786, 339], [204, 242], [63, 116], [70, 63], [110, 333], [612, 253], [386, 336], [245, 112], [657, 112], [789, 245], [607, 386], [512, 422], [153, 431]], 'dist_2': [[159, 384], [208, 208], [117, 297], [198, 110], [702, 332], [520, 288], [67, 423], [471, 291], [788, 378], [468, 249], [471, 423], [380, 296], [161, 153]]}, {'targ': [[153, 387], [377, 245], [647, 428], [108, 64], [567, 297], [336, 158], [66, 289], [602, 297], [613, 112]], 'dist_1': [[378, 335], [431, 291], [788, 115], [748, 203], [204, 67], [207, 246], [694, 67], [334, 110], [697, 247], [697, 161], [520, 205], [738, 248], [207, 432]], 'dist_2': [[433, 111], [108, 343], [610, 246], [648, 292], [335, 62], [741, 430], [114, 387], [162, 163], [432, 201], [381, 113], [611, 377], [296, 111], [611, 155]]}]},
            'Ls': {0: [{'targ': [[788, 197], [470, 298], [198, 152]], 'dist_1': [[606, 115], [341, 381], [246, 242]], 'dist_2': [[293, 247], [293, 197], [341, 297], [107, 207]]}, {'targ': [[332, 245], [424, 338]], 'dist_1': [[202, 291], [205, 337], [612, 433], [523, 114]], 'dist_2': [[67, 425], [649, 291], [650, 200], [287, 153]]}, {'targ': [[742, 336], [343, 208]], 'dist_1': [[162, 198], [518, 289], [650, 290], [512, 335]], 'dist_2': [[163, 337], [698, 67], [248, 63], [249, 110]]}, {'targ': [[109, 161], [199, 333], [742, 203]], 'dist_1': [[423, 378], [514, 427], [109, 243]], 'dist_2': [[431, 248], [567, 152], [693, 334], [604, 385]]}, {'targ': [[71, 158], [428, 197]], 'dist_1': [[747, 381], [111, 338], [515, 65], [737, 290]], 'dist_2': [[747, 341], [476, 341], [698, 162], [609, 73]]}, {'targ': [[785, 245], [745, 160]], 'dist_1': [[245, 72], [604, 423], [340, 162], [339, 200]], 'dist_2': [[469, 242], [152, 383], [790, 298], [108, 294]]}, {'targ': [[162, 431], [739, 206], [62, 155], [473, 387]], 'dist_1': [[562, 333], [377, 335], [289, 67]], 'dist_2': [[523, 381], [107, 109], [424, 112]]}], 1: [{'targ': [[693, 202], [793, 287], [523, 248]], 'dist_1': [[113, 379], [694, 70], [242, 380], [163, 386]], 'dist_2': [[429, 243], [66, 294], [787, 65], [242, 336], [693, 152]]}, {'targ': [[612, 426], [342, 69]], 'dist_1': [[744, 426], [158, 287], [518, 244], [244, 73], [248, 155]], 'dist_2': [[333, 208], [161, 206], [382, 382], [287, 66], [656, 428]]}, {'targ': [[656, 377], [246, 340], [65, 287]], 'dist_1': [[522, 296], [385, 73], [784, 379], [786, 245]], 'dist_2': [[107, 161], [424, 107], [694, 67], [115, 297], [603, 423]]}, {'targ': [[426, 206], [108, 153], [343, 206], [469, 386], [653, 198]], 'dist_1': [[608, 208], [248, 203], [792, 296]], 'dist_2': [[514, 433], [786, 112], [342, 250], [743, 336]]}, {'targ': [[242, 289], [517, 110], [380, 155]], 'dist_1': [[741, 72], [512, 386], [379, 203], [109, 111]], 'dist_2': [[606, 291], [787, 386], [693, 293], [294, 73], [73, 153]]}, {'targ': [[693, 243], [783, 340], [654, 433], [744, 378], [432, 295]], 'dist_1': [[294, 424], [387, 248], [69, 430]], 'dist_2': [[381, 293], [114, 245], [430, 114], [206, 117]]}, {'targ': [[384, 245], [424, 432], [697, 113], [788, 110], [562, 289]], 'dist_1': [[603, 292], [468, 336], [152, 118]], 'dist_2': [[382, 197], [203, 65], [567, 433], [560, 204]]}], 2: [{'targ': [[65, 62], [332, 253], [205, 202]], 'dist_1': [[740, 428], [201, 343], [516, 428], [62, 244]], 'dist_2': [[558, 107], [242, 339], [109, 197], [518, 203], [653, 248]]}, {'targ': [[163, 107], [475, 426], [157, 246]], 'dist_1': [[342, 425], [739, 246], [428, 251], [298, 386]], 'dist_2': [[297, 206], [292, 338], [72, 204], [565, 297], [429, 387]]}, {'targ': [[295, 205], [743, 342], [115, 198], [560, 341], [655, 197]], 'dist_1': [[110, 70], [160, 163], [789, 429]], 'dist_2': [[341, 115], [340, 379], [288, 155], [520, 242]]}, {'targ': [[289, 338], [112, 381], [163, 116], [702, 110]], 'dist_1': [[199, 334], [338, 73], [612, 246], [791, 379]], 'dist_2': [[785, 297], [152, 378], [297, 290], [701, 244]]}, {'targ': [[207, 112], [249, 381], [787, 69]], 'dist_1': [[605, 200], [378, 70], [65, 73], [790, 158]], 'dist_2': [[565, 153], [700, 377], [429, 427], [695, 69], [744, 246]]}, {'targ': [[291, 207], [562, 111], [205, 197]], 'dist_1': [[739, 207], [651, 427], [163, 115], [159, 378]], 'dist_2': [[604, 291], [293, 378], [425, 422], [695, 243], [785, 332]]}, {'targ': [[154, 73], [203, 108], [793, 160]], 'dist_1': [[199, 378], [560, 243], [514, 208], [422, 159]], 'dist_2': [[747, 433], [112, 423], [658, 69], [786, 292], [116, 108]]}], 3: [{'targ': [[70, 242], [699, 343]], 'dist_1': [[247, 157], [338, 336], [338, 62], [342, 208], [788, 110], [155, 243]], 'dist_2': [[63, 71], [290, 428], [67, 160], [115, 424], [562, 424], [606, 425]]}, {'targ': [[342, 159], [472, 335], [469, 296]], 'dist_1': [[426, 197], [702, 431], [243, 198], [782, 429], [377, 243]], 'dist_2': [[789, 252], [469, 110], [747, 290], [156, 290], [159, 113], [200, 342]]}, {'targ': [[656, 332], [432, 341], [649, 71], [748, 384], [297, 158], [745, 116]], 'dist_1': [[246, 68], [650, 200], [602, 70], [784, 337]], 'dist_2': [[563, 68], [477, 65], [745, 334], [433, 246]]}, {'targ': [[702, 156], [517, 153]], 'dist_1': [[647, 333], [515, 425], [341, 68], [423, 288], [296, 429], [332, 109]], 'dist_2': [[472, 152], [422, 253], [383, 112], [787, 118], [793, 293], [118, 382]]}, {'targ': [[747, 424], [388, 70]], 'dist_1': [[206, 388], [108, 160], [786, 111], [334, 159], [473, 342], [476, 388]], 'dist_2': [[515, 340], [202, 248], [702, 153], [160, 426], [379, 332], [792, 378]]}, {'targ': [[62, 338], [787, 432], [787, 386], [692, 70], [432, 242]], 'dist_1': [[287, 117], [513, 199], [422, 204], [517, 63]], 'dist_2': [[470, 117], [515, 161], [113, 200], [386, 251], [698, 112]]}, {'targ': [[156, 342], [64, 294], [698, 62]], 'dist_1': [[739, 62], [73, 377], [610, 287], [118, 156], [154, 430]], 'dist_2': [[242, 384], [288, 107], [288, 287], [521, 251], [700, 386], [654, 64]]}], 4: [{'targ': [[386, 65], [72, 424], [336, 251], [152, 295]], 'dist_1': [[378, 377], [343, 153], [793, 107], [558, 63], [476, 288]], 'dist_2': [[783, 160], [702, 253], [467, 199], [250, 425], [207, 381]]}, {'targ': [[64, 245], [698, 161], [250, 332], [472, 152], [520, 161], [518, 246]], 'dist_1': [[295, 65], [518, 197], [739, 296], [332, 73]], 'dist_2': [[605, 290], [199, 289], [294, 430], [790, 201]]}, {'targ': [[73, 117], [70, 248], [251, 153], [568, 66], [112, 388]], 'dist_1': [[653, 378], [423, 343], [297, 66], [152, 431]], 'dist_2': [[698, 252], [602, 379], [793, 68], [153, 114], [513, 197]]}, {'targ': [[155, 161], [478, 251]], 'dist_1': [[475, 380], [472, 206], [607, 423], [521, 158], [514, 429], [340, 116]], 'dist_2': [[154, 430], [471, 118], [72, 295], [559, 334], [251, 252], [604, 199]]}, {'targ': [[337, 116], [467, 156]], 'dist_1': [[514, 378], [159, 208], [789, 64], [560, 377], [520, 113], [522, 203]], 'dist_2': [[208, 73], [110, 388], [791, 296], [560, 111], [653, 288], [738, 298]]}, {'targ': [[738, 116], [611, 386], [243, 382]], 'dist_1': [[513, 206], [748, 430], [162, 433], [696, 340], [204, 377]], 'dist_2': [[563, 204], [253, 425], [562, 243], [607, 334], [655, 383], [522, 152]]}, {'targ': [[694, 338], [247, 427]], 'dist_1': [[335, 246], [747, 247], [336, 73], [428, 67], [567, 68], [334, 113]], 'dist_2': [[246, 159], [560, 336], [422, 198], [294, 107], [648, 197], [426, 108]]}]}
        };
    }

    componentDidMount() {

        window.scrollTo(0, 0);

        // prevent scroll overflow while modal is toggled
        document.body.classList.add("is-clipped");

        this.countTimes = [];

        this.phase = this.props.name.slice(0, 2);

        if (this.phase === "Co") {
            this.initializeTask();
        }
    }

    componentWillUnmount() {
        // kill all timers
        clearTimeout(this.showFixCross);
        clearTimeout(this.end);
        clearTimeout(this.pause);
        window.cancelAnimationFrame(this.anim);
        this.props.showMouseCursor();
        document.body.classList.remove("is-clipped");
    }

    // initiate the task after the participant has finished reading the task instruction
    initializeTask() {

        this.props.hideMouseCursor();

        // Untoggle the modal
        this.setState({
            modal: "modal",
            taskStarted: true
        }, function () {
            // remove prevent scroll overflow
            document.body.classList.remove("is-clipped");
        });

    }

    restart() {
        this.setState({
            modal: "modal is-active",
            taskCount: 0,
            taskActive: false,
            taskStarted: false,
            practiceEnd: false,
            numTargets: 0,
            numTargetsTrial: [],
            givenSolution: 0,
            validSolution: -99,
            showSolution: false
        }, function () {
            document.body.classList.add("is-clipped");
        })
    }


    // start a new trial of the task
    startTask() {

        // if there are trials left --> fixed trial count at the moment
        if (this.state.taskCount < (this.phase === "Pr" ? 3 : 7)) {

            // create a random set of shapes
            let {shapes, numTargets, hexVertical, hexHorizontal} = this.makeRandomShapes();

            // console.log(target, numTargets);
            // show a fixation cross for xx seconds before the task begins
            this.setState(() => ({
                showFixCross: true
            }), () => {
                // show the task box for xx seconds
                this.showFixCross = setTimeout(
                    ()=> this.setState((state) => ({
                        showFixCross: false,
                        taskActive: true,
                        taskCount: state.taskCount + 1,
                        progressValue: 0,
                        shapes: shapes,
                        numTargets: state.numTargets + numTargets,
                        numTargetsTrial: [...state.numTargetsTrial, numTargets],
                        numHexVertical: [...state.numHexVertical, hexVertical],
                        numHexHorizontal: [...state.numHexHorizontal, hexHorizontal]
                    }), ()=> {
                        this.startTime = Date.now();
                        this.tick();
                    }),
                    750
                )
            });

        } else {
            // if its the practice condition
            if (this.phase === "Pr") {
                document.body.classList.add("is-clipped");
                this.props.showMouseCursor();
                // end the task after a xx second End screen
                this.setState(() => ({
                    taskActive: false,
                    practiceEnd: true
                }))
                // if its the trial condition
            } else if (this.phase === "Co") {

                this.endTask()
            }
        }
    };

    endTask() {

        // save data about the number of shown shapes (per trial)
        const data = {"Total_num_targets": this.state.numTargets, "Trial_num_targets": this.state.numTargetsTrial,
            "Trial_num_hex_vertical": this.state.numHexVertical, "Trial_num_hex_horizontal": this.state.numHexHorizontal,
            "TrialTimes": this.countTimes};

        if (this.phase === "Pr") {
            // Proceed if its the practice trial
            this.props.proceedPhase(this.props.name, data)
        } else if (this.phase === "Co") {
            // show nothing and proceed after 1,5 seconds if its the real trial
            this.setState({
                taskActive: false
            }, function () {
                // end the task on a blank screen after 1,5 seconds
                this.props.updateScore(this.state.numTargets);
                this.end = setTimeout(
                    () => this.props.proceedPhase(this.props.name, data),
                    500
                );
            });
        }
    }

    tick() {
        // progressValue is the "value" of a progress bar which is 2867.5 units long (hard coded), this function
        // adds value to the progressbar which is visualized by a color (loading animation). If the loading bar is empty,
        // The task time at the moment is ca. 5 seconds
        if (this.state.progressValue < 2867.5) {
            this.setState(() => ({
                // 320
                progressValue: this.state.progressValue + (2867.5 / 300)
            }), ()=> {
                this.anim = window.requestAnimationFrame(this.tick)
            });
        } else {
            // if the task time is over, clear the interval timer and start a new trial after a 2 second delay
            // clearInterval(this.progressTimer);
            // log the time of the count trial
            this.countTimes.push(Date.now() - this.startTime);
            this.setState(()=>({
                taskActive: false
            }), ()=> {
                this.pause = setTimeout(
                    () => this.startTask(),
                    500
                )
            });
        }

    }

    // create a list of shapes
    makeRandomShapes(){

        // originally created a grid and filled it with a randomized number of shapes (based on predefined rules)
        // random shape creation was later dropped and replaced with a one time random creation of a dictionary that
        // contains all information about the shapes in all trials (created with a python script and copy & pasted
        // into this JS file

        // // Helper function to get a random number from an interval
        // const randNum = function (min, max) {
        //     return Math.floor(Math.random() * (max - min + 1) + min);
        // };
        //
        // // helper function to mimic pythons range() built-in function
        // const range = function (size, startAt = 0) {
        //     return [...Array(size).keys()].map(i => i + startAt);
        // };
        //
        // // Helper function to Shuffle an array
        // const shuffleArray = function (array) {
        //     for (let i = array.length - 1; i > 0; i--) {
        //         const j = Math.floor(Math.random() * (i + 1));
        //         [array[i], array[j]] = [array[j], array[i]];
        //     }
        // };
        //
        //
        // // Create a task Grid
        // const makeGrid = function (rows, columns, size) {
        //
        //     let coords = [];
        //
        //     // loop over columns and rows to get the center point of each grid field with a random offset
        //     for (const i of range(columns, 1)) {
        //         for (const k of range(rows, 1)) {
        //
        //             let x_cord = size*k + randNum(17, 28);
        //             let y_cord = size*i + randNum(17, 28);
        //
        //             coords.push([x_cord, y_cord])
        //         }
        //     }
        //
        //     // shuffle the grid coordinates
        //     shuffleArray(coords);
        //
        //     return coords
        // };
        //
        // // create a shuffled grid
        // let grid = makeGrid(18, 10, 45);
        //
        // let shapes = [];
        //
        // // create a number of random shapes to create
        // let squares;
        // let hexVertical;
        // let hexHorizontal;
        //
        // if (this.phase === "Pr") {
        //     // if its the low-stress condition
        //     squares = randNum(2, 5);
        //     hexVertical = randNum(2, 5);
        //     hexHorizontal = randNum(2, 5);
        // } else if (this.props.condition === 1) {
        //     // if its the low-stress condition
        //     squares = randNum(1, 4 + Math.floor(this.props.order/2));
        //     hexVertical = randNum(1, 4 + Math.floor(this.props.order/2));
        //     hexHorizontal = randNum(1, 4 + Math.floor(this.props.order/2));
        // } else if (this.props.condition === 0) {
        //     // if its the high-stress condition
        //     squares = randNum(5, 11 + Math.floor(this.props.order/2));
        //     hexVertical = randNum(5, 11 + Math.floor(this.props.order/2));
        //     hexHorizontal = randNum(5, 11 + Math.floor(this.props.order/2));
        // }

        // get colors (test)
        // const colors = ["green", "blue", "red", "orange", "black"];
        // default color: "hsl(217, 71%, 53%)"

        // make shapes
        let shapes = [];

        let cond;

        if(this.phase === "Pr") {
            cond = "Pr"
        } else if (this.props.condition === 1){
            cond = "Ls"
        } else if (this.props.condition === 0) {
            cond = "Hs"
        }

        let key = 0;

        // get the relevant array of shape positions in the grid depending on the condition, the task number of the
        // count task in the study as well as the trial number, e.g. second trial of third count task in the high-stress
        // condition

        // positions of targets
        const targets = this.shapes[cond][this.props.order][this.state.taskCount]["targ"];
        // positions of distractor_1
        const dist_1 = this.shapes[cond][this.props.order][this.state.taskCount]["dist_1"];
        // position of distractor_2
        const dist_2 = this.shapes[cond][this.props.order][this.state.taskCount]["dist_2"];


        // create the shapes
        // squares
        for (let i = 0; i < targets.length; i++) {
            shapes.push(<rect width="30" height="30" x={targets[i][0] - 15} y={targets[i][1] - 15} fill={"hsl(217, 71%, 53%)"} key={key}/>);
            key++;
        }

        // hexagon vertical
        for (let i = 0; i < dist_1.length; i++) {
            shapes.push(<polygon key={key} points={
                "" +
                (dist_1[i][0]).toString() + "," + (dist_1[i][1]-17.5).toString() + " " +
                (dist_1[i][0]+15).toString() + "," + (dist_1[i][1]-12.5).toString() + " " +
                (dist_1[i][0]+15).toString() + "," + (dist_1[i][1]+12.5).toString() + " " +
                (dist_1[i][0]).toString() + "," + (dist_1[i][1]+17.5).toString() + " " +
                (dist_1[i][0]-15).toString() + "," + (dist_1[i][1]+12.5).toString() + " " +
                (dist_1[i][0]-15).toString() + "," + (dist_1[i][1]-12.5).toString()
            } fill={"hsl(217, 71%, 53%)"}/>);
            key++;
        }

        // hexagon horizontal
        for (let i = 0; i < dist_2.length; i++) {
            shapes.push(<polygon key={key} points={
                "" +
                (dist_2[i][0]-17.5).toString() + "," + (dist_2[i][1]).toString() + " " +
                (dist_2[i][0]-12.5).toString() + "," + (dist_2[i][1]-15).toString() + " " +
                (dist_2[i][0]+12.5).toString() + "," + (dist_2[i][1]-15).toString() + " " +
                (dist_2[i][0]+17.5).toString() + "," + (dist_2[i][1]).toString() + " " +
                (dist_2[i][0]+12.5).toString() + "," + (dist_2[i][1]+15).toString() + " " +
                (dist_2[i][0]-12.5).toString() + "," + (dist_2[i][1]+15).toString()
            } fill={"hsl(217, 71%, 53%)"}/>);
            key++;
        }

        // old code to create the shapes when they came from positional arrays created on the fly in this function

        // // squares
        // for (const i of range(squares, 0)) {
        //     shapes.push(<rect width="30" height="30" x={grid[i][0] - 15} y={grid[i][1] - 15} fill={"hsl(217, 71%, 53%)"} key={i}/>)
        // }
        //
        // // hexagon vertical
        // for (const i of range(hexVertical, squares)) {
        //     shapes.push(<polygon key={i} points={
        //         "" +
        //         (grid[i][0]).toString() + "," + (grid[i][1]-17.5).toString() + " " +
        //         (grid[i][0]+15).toString() + "," + (grid[i][1]-12.5).toString() + " " +
        //         (grid[i][0]+15).toString() + "," + (grid[i][1]+12.5).toString() + " " +
        //         (grid[i][0]).toString() + "," + (grid[i][1]+17.5).toString() + " " +
        //         (grid[i][0]-15).toString() + "," + (grid[i][1]+12.5).toString() + " " +
        //         (grid[i][0]-15).toString() + "," + (grid[i][1]-12.5).toString()
        //     } fill={"hsl(217, 71%, 53%)"}/>)
        // }
        //
        // // hexagon horizontal
        // for (const i of range(hexHorizontal, squares + hexVertical)) {
        //     shapes.push(<polygon key={i} points={
        //         "" +
        //         (grid[i][0]-17.5).toString() + "," + (grid[i][1]).toString() + " " +
        //         (grid[i][0]-12.5).toString() + "," + (grid[i][1]-15).toString() + " " +
        //         (grid[i][0]+12.5).toString() + "," + (grid[i][1]-15).toString() + " " +
        //         (grid[i][0]+17.5).toString() + "," + (grid[i][1]).toString() + " " +
        //         (grid[i][0]+12.5).toString() + "," + (grid[i][1]+15).toString() + " " +
        //         (grid[i][0]-12.5).toString() + "," + (grid[i][1]+15).toString()
        //     } fill={"hsl(217, 71%, 53%)"}/>)
        // }


        // return the shapes, the number of targets and the number of distractors
        return {shapes: shapes,
            numTargets: targets.length,
            hexVertical: dist_1.length,
            hexHorizontal: dist_2.length}

    }

    // Helper for the practice End (copied from the count task answer)
    // change value of the input field and save it in the state
    changeInputValue(evt) {
        const value = Number(evt.target.value);

        if (isNaN(value)) {
            this.setState({
                givenSolution: 0,
                validSolution: false,
            })
        } else if (value <= 0) {
            this.setState({
                validSolution: false,
                givenSolution: 0,
            })
        } else {
            this.setState({
                validSolution: true,
                givenSolution: value,
            })
        }
    }


    // renders the start or end of the task
    renderStart() {

        return(
            <div style={{maxWidth: "900px"}}>
                <div>
                    <p style={{fontSize: "45px", fontWeight: "bold"}}>
                        Bereit machen zum Quadrate zählen in <Timer time={3}
                                                                    end={() => this.startTask()}/></p>
                </div>
            </div>
        );

    };

    // renders a task trial
    renderTaskTrial() {

        return(
            <div>
                <svg style={{height: "540px",
                    width: "900px"}}>
                    {/*Show the created grid, relevant for testing and debugging only*/}
                    {/*{this.state.gridActive ?*/}
                    {/*        <defs>*/}
                    {/*            <pattern id="grid" width="45" height="45" patternUnits="userSpaceOnUse" x="0" y="0">*/}
                    {/*                <path d="M0,0 v45 h45" fill="none" stroke="grey" strokeWidth="1"/>*/}
                    {/*            </pattern>*/}
                    {/*        </defs>*/}
                    {/*    : null}*/}
                    {/*{this.state.gridActive ?*/}
                    {/*    <rect x="0" y="0" width="900px" height="540px" fill="url(#grid)"/>*/}
                    {/*    : null}*/}
                    {/*Create the shapes*/}
                    {this.state.shapes.map((shapes) => shapes)}
                    {/*Loading bar around the task box*/}
                    <path d='M0,0 900,0 900,540 0,540 0,0' style={{stroke: "hsl(0, 0%, 93%)", fill:"none", strokeWidth: "25px"}}/>
                    <path d='M0,12.5 0,540 900,540 900,0 0,0' strokeDashoffset={this.state.progressValue} strokeDasharray="2880, 2880" style={{stroke: "black", fill:"none", strokeWidth: "25px"}}/>
                </svg>
            </div>
        );
    };

    // render a fixation cross (only after the first trial)
    renderFixationCross() {
        return(
            <div>
                {this.state.taskCount === 0 ?
                    null
                    :
                    <svg width="70" height="70">
                        {/*{Fixation Cross}*/}
                        <line x1="35" y1="0" x2="35" y2="70" strokeWidth="10" stroke={"hsl(217, 71%, 53%)"}/>
                        <line x1="0" y1="35" x2="70" y2="35" strokeWidth="10" stroke={"hsl(217, 71%, 53%)"}/>
                    </svg>
                }
            </div>
            );

    }

    // Render the task instruction modal
    renderInstruction() {
        return (
            <div className={this.state.modal} style={{textAlign: "left", fontSize: "18px"}}>
                <div className="modal-background">{null}</div>
                <div className="modal-content">
                    <header className="modal-card-head">
                        <p className="modal-card-title">{null}</p>
                    </header>
                    <section className="modal-card-body">
                        <div className="content">
                            <h3>Dazukommende Aufgabe "Quadrate zählen"</h3>
                            <p>
                               In dieser Aufgabe sehen Sie in mehreren Durchgängen für einige Sekunden verschiedene geometrische Figuren.
                                Ihre Aufgabe ist es, die <strong>Gesamtzahl der <u>Quadrate</u> über alle Durchgänge hinweg zu zählen</strong>.
                            </p>
                            <p>
                              Neben dem Quadrat sehen Sie weitere Figuren. Zählen Sie diese <strong>nicht</strong>,
                                sondern <strong>nur die Quadrate</strong>.
                            </p>
                            <p>
                                <strong>Beispiel:</strong> Im ersten Durchgang sehen Sie insgesamt 7 Figuren und zählen davon 4 Quadrate. Im
                                zweiten Durchgang zählen Sie 3 Quadrate und im dritten Durchgang zählen Sie 2 Quadrate.
                                Insgesamt haben Sie damit über alle drei Durchgänge 4 + 3 + 2 = 9 Quadrate gezählt.
                            </p>
                            <p>
                                <strong>Hinweis:</strong> Es kann passieren, dass Sie es nicht schaffen, alle Quadrate pro Durchgang zu zählen. Brechen
                                Sie die Aufgabe dann nicht ab, sondern versuchen Sie die Anzahl der Quadrate während des Durchgangs
                                zu schätzen und setzen Sie im nächsten Durchgang Ihre Zählung fort.
                            </p>
                        </div>
                    </section>
                    <footer className="modal-card-foot">
                        <button className="button is-link" onClick={this.initializeTask}>Übungsaufgabe starten</button>
                    </footer>
                </div>
            </div>
        );
    };

    renderPracticeEnd() {
        return (
            <div>
                <div className="section">
                    <div className="content" style={{width: "900px"}}>

                        <div>
                            <h4>
                                Der Übungsdurchlauf ist beendet
                            </h4>
                            <h4>Wie viele Quadrate haben Sie gezählt?</h4>
                            <div className="field is-grouped is-grouped-centered" style={{marginTop: "45px"}}>
                                <div style={{textAlign: "center"}} className="control">
                                    <input onChange={(evt) => this.changeInputValue(evt)}
                                           style={{maxWidth: "175px"}}
                                           className={(!this.state.validSolution) ? "input is-danger" : "input"}
                                           type="text" placeholder="Ihre Antwort"/>
                                </div>
                                <div className="control">
                                    <button className="button is-link" onClick={() => {this.setState({showSolution: true})}}>
                                        Lösung anzeigen
                                    </button>
                                </div>
                            </div>
                            <p style={(!this.state.validSolution)
                                ? {visibility: "visible"} : {visibility: "hidden"}} className="help is-danger">Bitte tragen Sie eine gültige Zahl ein
                            </p>
                            {<div style={this.state.showSolution ? {visibility: "visible", marginTop: "30px"} : {visibility: "hidden", marginTop: "30px"}}>
                                <p>
                                    <strong>
                                        {this.state.givenSolution === this.state.numTargets ? "Richtig: " : "Falsch: "}
                                        Die Lösung dieser Aufgabe ist {this.state.numTargets}
                                    </strong>.
                                    Sie sollten <span>{this.state.numTargetsTrial[0]}</span> Quadrate im ersten Durchgang, <span>{this.state.numTargetsTrial[1]}</span> Quadrate
                                    im zweiten Durchgang und  <span >{this.state.numTargetsTrial[2]}</span> Quadrate im dritten Durchgang gezählt haben.
                                </p>
                                <p>
                                    Falls Sie die Aufgabe wiederholen möchten, klicken Sie auf "Übungsaufgabe neu starten", ansonsten klicken
                                    Sie auf "Weiter".
                                </p>
                                <div className={"field is-grouped is-grouped-centered"} style={{marginTop: "58px"}}>
                                    <div className="control">
                                        <button className="button is-link" onClick={() => this.restart()}>Übungsaufgabe neu starten</button>
                                    </div>
                                    <div className="control">
                                        <button className="button is-link" onClick={() => this.endTask()}>Weiter</button>
                                    </div>
                                </div>
                            </div>}
                        </div>

                    </div>
                </div>
            </div>
        );
    }

    // render everything
    render() {

        return(
            <div>
                {this.state.showFixCross ? this.renderFixationCross() : null}
                {this.state.taskActive ? this.renderTaskTrial() : (this.state.taskStarted && this.state.taskCount === 0 ? this.renderStart() : null)}
                {this.renderInstruction()}
                {this.state.practiceEnd ? this.renderPracticeEnd() : null}
            </div>
        );
    }


}